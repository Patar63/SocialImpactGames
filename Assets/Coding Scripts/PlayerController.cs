//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""721812e4-a63c-4ce8-bd52-8eac055eb214"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""146631b8-f01d-4060-ab7c-75c80aea9f4c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0c30c728-c1ed-4601-b587-47802e1f354f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""0eb5e955-1433-42ab-951a-9326aa499449"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9cb88d80-732f-468d-a7c7-16ae67cd7a01"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1884584b-168e-4ee8-ba98-6b4eadc9d44c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""f199ec59-b08a-495d-a5c2-fb4c7d18e460"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""61256569-69ed-404a-9899-c455d404f47a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3f19c482-ff83-4f2c-b030-3c911a0902c9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""41901633-1796-4366-8733-d70e17b36c43"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6b3e828-f983-4589-b391-054d9acda9d1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""4d71a8f1-a3fd-487c-ae52-58d1c93d5bae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""23e5c462-34c6-4909-8463-74cb41659611"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""846742b2-0bdd-4bac-a841-794c640ba2f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""30d18cec-73c1-4c96-bafa-b812d6968bf9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""867d5efc-67d9-4c08-aa7c-ea9e11cea0c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
],
    ""controlSchemes"": []
}");

        //Player Stuff (manually made)
        _Player = asset.FindActionMap("Player", throwIfNotFound: true);
        _Player_Movement = _Player.FindAction("Movement", throwIfNotFound: true);
        _Player_Pause = _Player.FindAction("Pause", throwIfNotFound: true);
        _Player_Attack = _Player.FindAction("Attack", throwIfNotFound: true);

        //UI Stuff (manually made)
        _UserInterface = asset.FindActionMap("UI", throwIfNotFound: true);
        _UI_Start = _UserInterface.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    //Player variables for input
    private readonly InputActionMap _Player;
    private readonly InputAction _Player_Movement;
    private readonly InputAction _Player_Attack;
    private readonly InputAction _Player_Pause;
    private IPlayerActions _PlayerActionsCallbackInterface;
    public struct PlayerActions
    {
        private @PlayerController _Wrapper;
        public PlayerActions(@PlayerController wrapper) { _Wrapper = wrapper; }
        public InputAction @Movement => _Wrapper._Player_Movement;
        public InputAction @Pause => _Wrapper._Player_Pause;
        public InputAction @Attack => _Wrapper._Player_Attack;
        public InputActionMap Get() { return _Wrapper._Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (_Wrapper._PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= _Wrapper._PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= _Wrapper._PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= _Wrapper._PlayerActionsCallbackInterface.OnMovement;
                @Pause.started -= _Wrapper._PlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= _Wrapper._PlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= _Wrapper._PlayerActionsCallbackInterface.OnPause;
                @Attack.started -= _Wrapper._PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= _Wrapper._PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= _Wrapper._PlayerActionsCallbackInterface.OnAttack;
            }

            _Wrapper._PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }

    public PlayerActions @Player => new PlayerActions(this);

    //UI variables
    private readonly InputActionMap _UserInterface;
    private readonly InputAction _UI_Start;
    private IUIActions _UIActionsCallbackInterface;

    public struct UIActions
    {
        private @PlayerController _Wrapper;
        public UIActions(@PlayerController wrapper) { _Wrapper = wrapper; }
        public InputAction @Start => _Wrapper._UI_Start;
        public InputActionMap Get() { return _Wrapper._UserInterface; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (_Wrapper._UIActionsCallbackInterface != null)
            {
                @Start.started -= _Wrapper._UIActionsCallbackInterface.OnStart;
                @Start.performed -= _Wrapper._UIActionsCallbackInterface.OnStart;
                @Start.canceled -= _Wrapper._UIActionsCallbackInterface.OnStart;
            }

            _Wrapper._UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }

    public interface IUIActions
    {
        void OnStart(InputAction.CallbackContext context);
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }
}
